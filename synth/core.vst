--
-- Generated by VASY
--
ENTITY core IS
PORT(
  if_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_adr_valid	: OUT BIT;
  ic_inst	: IN BIT_VECTOR(31 DOWNTO 0);
  ic_stall	: IN BIT;
  mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  mem_stw	: OUT BIT;
  mem_stb	: OUT BIT;
  mem_load	: OUT BIT;
  mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dc_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dc_stall	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END core;

ARCHITECTURE VST OF core IS

  SIGNAL if_pop	: BIT;
  SIGNAL if_ir	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL if2dec_empty	: BIT;
  SIGNAL dec_op1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL dec_op2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL dec_exe_dest	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL dec_exe_wb	: BIT;
  SIGNAL dec_flag_wb	: BIT;
  SIGNAL dec_mem_data	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL dec_mem_dest	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL dec_pre_index	: BIT;
  SIGNAL dec_mem_lw	: BIT;
  SIGNAL dec_mem_lb	: BIT;
  SIGNAL dec_mem_sw	: BIT;
  SIGNAL dec_mem_sb	: BIT;
  SIGNAL dec_shift_lsl	: BIT;
  SIGNAL dec_shift_lsr	: BIT;
  SIGNAL dec_shift_asr	: BIT;
  SIGNAL dec_shift_ror	: BIT;
  SIGNAL dec_shift_rrx	: BIT;
  SIGNAL dec_shift_val	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL dec_cy	: BIT;
  SIGNAL dec_comp_op1	: BIT;
  SIGNAL dec_comp_op2	: BIT;
  SIGNAL dec_alu_cy	: BIT;
  SIGNAL dec2exe_empty	: BIT;
  SIGNAL dec_pc	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL dec2if_empty	: BIT;
  SIGNAL dec_pop	: BIT;
  SIGNAL exe_pop	: BIT;
  SIGNAL dec2exe_push	: BIT;
  SIGNAL dec_alu_add	: BIT;
  SIGNAL dec_alu_and	: BIT;
  SIGNAL dec_alu_or	: BIT;
  SIGNAL dec_alu_xor	: BIT;
  SIGNAL exe_res	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL exe_c	: BIT;
  SIGNAL exe_v	: BIT;
  SIGNAL exe_n	: BIT;
  SIGNAL exe_z	: BIT;
  SIGNAL exe_dest	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL exe_wb	: BIT;
  SIGNAL exe_flag_wb	: BIT;
  SIGNAL exe_mem_adr	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL exe_mem_data	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL exe_mem_dest	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL exe_mem_lw	: BIT;
  SIGNAL exe_mem_lb	: BIT;
  SIGNAL exe_mem_sw	: BIT;
  SIGNAL exe_mem_sb	: BIT;
  SIGNAL exe2mem_empty	: BIT;
  SIGNAL mem_pop	: BIT;
  SIGNAL mem_res	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL mem_dest	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL mem_wb	: BIT;
  SIGNAL if_flush	: BIT;
  SIGNAL dec2exe_output	: BIT_VECTOR(126 DOWNTO 0);
  SIGNAL dec2exe_input	: BIT_VECTOR(126 DOWNTO 0);
  SIGNAL dec2exe_full	: BIT;
  COMPONENT core_model
  PORT(
  vdd	: IN BIT;
  vss	: IN BIT;
  dec2exe_input	: OUT BIT_VECTOR(126 DOWNTO 0);
  dec_alu_xor	: IN BIT;
  dec_alu_or	: IN BIT;
  dec_alu_and	: IN BIT;
  dec_alu_add	: IN BIT;
  dec_alu_cy	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_cy	: IN BIT;
  dec_shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  dec_shift_rrx	: IN BIT;
  dec_shift_ror	: IN BIT;
  dec_shift_asr	: IN BIT;
  dec_shift_lsr	: IN BIT;
  dec_shift_lsl	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_lw	: IN BIT;
  dec_pre_index	: IN BIT;
  dec_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_flag_wb	: IN BIT;
  dec_exe_wb	: IN BIT;
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_op2	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT mem
  PORT(
  exe2mem_empty	: IN BIT;
  mem_pop	: OUT BIT;
  exe_mem_adr	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  exe_mem_lw	: IN BIT;
  exe_mem_lb	: IN BIT;
  exe_mem_sw	: IN BIT;
  exe_mem_sb	: IN BIT;
  mem_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  mem_wb	: OUT BIT;
  mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  mem_stw	: OUT BIT;
  mem_stb	: OUT BIT;
  mem_load	: OUT BIT;
  mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dc_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dc_stall	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT exec
  PORT(
  dec2exe_empty	: IN BIT;
  exe_pop	: OUT BIT;
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: IN BIT;
  dec_flag_wb	: IN BIT;
  dec_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: IN BIT;
  dec_mem_lw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_shift_lsl	: IN BIT;
  dec_shift_lsr	: IN BIT;
  dec_shift_asr	: IN BIT;
  dec_shift_ror	: IN BIT;
  dec_shift_rrx	: IN BIT;
  dec_shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_alu_cy	: IN BIT;
  dec_alu_cmd	: IN BIT_VECTOR(1 DOWNTO 0);
  exe_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_c	: OUT BIT;
  exe_v	: OUT BIT;
  exe_n	: OUT BIT;
  exe_z	: OUT BIT;
  exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: OUT BIT;
  exe_flag_wb	: OUT BIT;
  exe_mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_mem_lw	: OUT BIT;
  exe_mem_lb	: OUT BIT;
  exe_mem_sw	: OUT BIT;
  exe_mem_sb	: OUT BIT;
  exe2mem_empty	: OUT BIT;
  mem_pop	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT decod
  PORT(
  dec_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: OUT BIT;
  dec_flag_wb	: OUT BIT;
  dec_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: OUT BIT;
  dec_mem_lw	: OUT BIT;
  dec_mem_lb	: OUT BIT;
  dec_mem_sw	: OUT BIT;
  dec_mem_sb	: OUT BIT;
  dec_shift_lsl	: OUT BIT;
  dec_shift_lsr	: OUT BIT;
  dec_shift_asr	: OUT BIT;
  dec_shift_ror	: OUT BIT;
  dec_shift_rrx	: OUT BIT;
  dec_shift_val	: OUT BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: OUT BIT;
  dec_comp_op1	: OUT BIT;
  dec_comp_op2	: OUT BIT;
  dec_alu_cy	: OUT BIT;
  dec2exe_full	: IN BIT;
  dec2exe_push	: OUT BIT;
  dec_alu_add	: OUT BIT;
  dec_alu_and	: OUT BIT;
  dec_alu_or	: OUT BIT;
  dec_alu_xor	: OUT BIT;
  exe_res	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_c	: IN BIT;
  exe_v	: IN BIT;
  exe_n	: IN BIT;
  exe_z	: IN BIT;
  exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: IN BIT;
  exe_flag_wb	: IN BIT;
  dec_pc	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_ir	: IN BIT_VECTOR(31 DOWNTO 0);
  if_flush	: OUT BIT;
  dec2if_empty	: OUT BIT;
  if_pop	: IN BIT;
  if2dec_empty	: IN BIT;
  dec_pop	: OUT BIT;
  mem_res	: IN BIT_VECTOR(31 DOWNTO 0);
  mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  mem_wb	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT fifo_127b
  PORT(
  din	: IN BIT_VECTOR(126 DOWNTO 0);
  dout	: OUT BIT_VECTOR(126 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT ifetch
  PORT(
  if_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_adr_valid	: OUT BIT;
  ic_inst	: IN BIT_VECTOR(31 DOWNTO 0);
  ic_stall	: IN BIT;
  dec2if_empty	: IN BIT;
  if_pop	: OUT BIT;
  dec_pc	: IN BIT_VECTOR(31 DOWNTO 0);
  if_ir	: OUT BIT_VECTOR(31 DOWNTO 0);
  if2dec_empty	: OUT BIT;
  dec_pop	: IN BIT;
  if_flush	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  core_inst : core_model
  PORT MAP (
    vdd => vdd,
    vss => vss,
    dec2exe_input => dec2exe_input,
    dec_alu_xor => dec_alu_xor,
    dec_alu_or => dec_alu_or,
    dec_alu_and => dec_alu_and,
    dec_alu_add => dec_alu_add,
    dec_alu_cy => dec_alu_cy,
    dec_comp_op2 => dec_comp_op2,
    dec_comp_op1 => dec_comp_op1,
    dec_cy => dec_cy,
    dec_shift_val => dec_shift_val,
    dec_shift_rrx => dec_shift_rrx,
    dec_shift_ror => dec_shift_ror,
    dec_shift_asr => dec_shift_asr,
    dec_shift_lsr => dec_shift_lsr,
    dec_shift_lsl => dec_shift_lsl,
    dec_mem_sb => dec_mem_sb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_lw => dec_mem_lw,
    dec_pre_index => dec_pre_index,
    dec_mem_dest => dec_mem_dest,
    dec_mem_data => dec_mem_data,
    dec_flag_wb => dec_flag_wb,
    dec_exe_wb => dec_exe_wb,
    dec_exe_dest => dec_exe_dest,
    dec_op2 => dec_op2,
    dec_op1 => dec_op1
  );
  mem_i : mem
  PORT MAP (
    exe_mem_adr => exe_mem_adr,
    exe_mem_data => exe_mem_data,
    exe_mem_dest => exe_mem_dest,
    mem_res => mem_res,
    mem_dest => mem_dest,
    mem_adr => mem_adr,
    mem_data => mem_data,
    dc_data => dc_data,
    vss => vss,
    vdd => vdd,
    dc_stall => dc_stall,
    mem_load => mem_load,
    mem_stb => mem_stb,
    mem_stw => mem_stw,
    mem_wb => mem_wb,
    exe_mem_sb => exe_mem_sb,
    exe_mem_sw => exe_mem_sw,
    exe_mem_lb => exe_mem_lb,
    exe_mem_lw => exe_mem_lw,
    mem_pop => mem_pop,
    exe2mem_empty => exe2mem_empty
  );
  exec_i : exec
  PORT MAP (
    dec_op1 => dec2exe_output(126 downto 95),
    dec_op2 => dec2exe_output(94 downto 63),
    dec_exe_dest => dec2exe_output(62 downto 59),
    dec_mem_data => dec2exe_output(56 downto 25),
    dec_mem_dest => dec2exe_output(24 downto 21),
    dec_shift_val => dec2exe_output(10 downto 6),
    dec_alu_cmd => dec2exe_output(1 downto 0),
    exe_res => exe_res,
    exe_dest => exe_dest,
    exe_mem_adr => exe_mem_adr,
    exe_mem_data => exe_mem_data,
    exe_mem_dest => exe_mem_dest,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    mem_pop => mem_pop,
    exe2mem_empty => exe2mem_empty,
    exe_mem_sb => exe_mem_sb,
    exe_mem_sw => exe_mem_sw,
    exe_mem_lb => exe_mem_lb,
    exe_mem_lw => exe_mem_lw,
    exe_flag_wb => exe_flag_wb,
    exe_wb => exe_wb,
    exe_z => exe_z,
    exe_n => exe_n,
    exe_v => exe_v,
    exe_c => exe_c,
    dec_alu_cy => dec2exe_output(2),
    dec_comp_op2 => dec2exe_output(3),
    dec_comp_op1 => dec2exe_output(4),
    dec_cy => dec2exe_output(5),
    dec_shift_rrx => dec2exe_output(11),
    dec_shift_ror => dec2exe_output(12),
    dec_shift_asr => dec2exe_output(13),
    dec_shift_lsr => dec2exe_output(14),
    dec_shift_lsl => dec2exe_output(15),
    dec_mem_sb => dec2exe_output(16),
    dec_mem_sw => dec2exe_output(17),
    dec_mem_lb => dec2exe_output(18),
    dec_mem_lw => dec2exe_output(19),
    dec_pre_index => dec2exe_output(20),
    dec_flag_wb => dec2exe_output(57),
    dec_exe_wb => dec2exe_output(58),
    exe_pop => exe_pop,
    dec2exe_empty => dec2exe_empty
  );
  dec2exe : fifo_127b
  PORT MAP (
    din(126 downto 0) => dec2exe_input,
    dout(126 downto 0) => dec2exe_output,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    empty => dec2exe_empty,
    full => dec2exe_full,
    pop => exe_pop,
    push => dec2exe_push
  );
  decod_i : decod
  PORT MAP (
    dec_op1 => dec_op1,
    dec_op2 => dec_op2,
    dec_exe_dest => dec_exe_dest,
    dec_mem_data => dec_mem_data,
    dec_mem_dest => dec_mem_dest,
    dec_shift_val => dec_shift_val,
    exe_res => exe_res,
    exe_dest => exe_dest,
    dec_pc => dec_pc,
    if_ir => if_ir,
    mem_res => mem_res,
    mem_dest => mem_dest,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    mem_wb => mem_wb,
    dec_pop => dec_pop,
    if2dec_empty => if2dec_empty,
    if_pop => if_pop,
    dec2if_empty => dec2if_empty,
    if_flush => if_flush,
    exe_flag_wb => exe_flag_wb,
    exe_wb => exe_wb,
    exe_z => exe_z,
    exe_n => exe_n,
    exe_v => exe_v,
    exe_c => exe_c,
    dec_alu_xor => dec_alu_xor,
    dec_alu_or => dec_alu_or,
    dec_alu_and => dec_alu_and,
    dec_alu_add => dec_alu_add,
    dec2exe_push => dec2exe_push,
    dec2exe_full => dec2exe_full,
    dec_alu_cy => dec_alu_cy,
    dec_comp_op2 => dec_comp_op2,
    dec_comp_op1 => dec_comp_op1,
    dec_cy => dec_cy,
    dec_shift_rrx => dec_shift_rrx,
    dec_shift_ror => dec_shift_ror,
    dec_shift_asr => dec_shift_asr,
    dec_shift_lsr => dec_shift_lsr,
    dec_shift_lsl => dec_shift_lsl,
    dec_mem_sb => dec_mem_sb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_lw => dec_mem_lw,
    dec_pre_index => dec_pre_index,
    dec_flag_wb => dec_flag_wb,
    dec_exe_wb => dec_exe_wb
  );
  ifetch_i : ifetch
  PORT MAP (
    if_adr => if_adr,
    ic_inst => ic_inst,
    dec_pc => dec_pc,
    if_ir => if_ir,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    if_flush => if_flush,
    dec_pop => dec_pop,
    if2dec_empty => if2dec_empty,
    if_pop => if_pop,
    dec2if_empty => dec2if_empty,
    ic_stall => ic_stall,
    if_adr_valid => if_adr_valid
  );
END VST;
