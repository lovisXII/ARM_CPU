--
-- Generated by VASY
--
ENTITY exec IS
PORT(
  dec2exe_empty	: IN BIT;
  exe_pop	: OUT BIT;
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: IN BIT;
  dec_flag_wb	: IN BIT;
  dec_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: IN BIT;
  dec_mem_lw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_shift_lsl	: IN BIT;
  dec_shift_lsr	: IN BIT;
  dec_shift_asr	: IN BIT;
  dec_shift_ror	: IN BIT;
  dec_shift_rrx	: IN BIT;
  dec_shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_alu_cy	: IN BIT;
  dec_alu_cmd	: IN BIT_VECTOR(1 DOWNTO 0);
  exe_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_c	: OUT BIT;
  exe_v	: OUT BIT;
  exe_n	: OUT BIT;
  exe_z	: OUT BIT;
  exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: OUT BIT;
  exe_flag_wb	: OUT BIT;
  exe_mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_mem_lw	: OUT BIT;
  exe_mem_lb	: OUT BIT;
  exe_mem_sw	: OUT BIT;
  exe_mem_sb	: OUT BIT;
  exe2mem_empty	: OUT BIT;
  mem_pop	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END exec;

ARCHITECTURE VST OF exec IS

  SIGNAL res_shift	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL alu_in_op2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL alu_in_op1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL cy_shift_out	: BIT;
  SIGNAL cy_alu_out	: BIT;
  SIGNAL res_alu	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL exe2mem_full	: BIT;
  SIGNAL mem_adr	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL exe_push	: BIT;
  COMPONENT exec_model
  PORT(
  dec2exe_empty	: IN BIT;
  exe_pop	: OUT BIT;
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: IN BIT;
  dec_flag_wb	: IN BIT;
  dec_pre_index	: IN BIT;
  dec_mem_lw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_alu_cy	: IN BIT;
  exe_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_c	: OUT BIT;
  exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: OUT BIT;
  exe_flag_wb	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  exe_push	: OUT BIT;
  mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe2mem_full	: IN BIT;
  res_alu	: IN BIT_VECTOR(31 DOWNTO 0);
  cy_alu_out	: IN BIT;
  cy_shift_out	: IN BIT;
  alu_in_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  alu_in_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  res_shift	: IN BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT fifo_72b
  PORT(
  din	: IN BIT_VECTOR(71 DOWNTO 0);
  dout	: OUT BIT_VECTOR(71 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT shifter
  PORT(
  shift_lsl	: IN BIT;
  shift_lsr	: IN BIT;
  shift_asr	: IN BIT;
  shift_ror	: IN BIT;
  shift_rrx	: IN BIT;
  shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT alu
  PORT(
  op1	: IN BIT_VECTOR(31 DOWNTO 0);
  op2	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  cmd	: IN BIT_VECTOR(1 DOWNTO 0);
  res	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  z	: OUT BIT;
  n	: OUT BIT;
  v	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  exec_inst : exec_model
  PORT MAP (
    dec2exe_empty => dec2exe_empty,
    exe_pop => exe_pop,
    dec_op1 => dec_op1,
    dec_exe_dest => dec_exe_dest,
    dec_exe_wb => dec_exe_wb,
    dec_flag_wb => dec_flag_wb,
    dec_pre_index => dec_pre_index,
    dec_mem_lw => dec_mem_lw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_sb => dec_mem_sb,
    dec_comp_op1 => dec_comp_op1,
    dec_comp_op2 => dec_comp_op2,
    dec_alu_cy => dec_alu_cy,
    exe_res => exe_res,
    exe_c => exe_c,
    exe_dest => exe_dest,
    exe_wb => exe_wb,
    exe_flag_wb => exe_flag_wb,
    vdd => vdd,
    vss => vss,
    exe_push => exe_push,
    mem_adr => mem_adr,
    exe2mem_full => exe2mem_full,
    res_alu => res_alu,
    cy_alu_out => cy_alu_out,
    cy_shift_out => cy_shift_out,
    alu_in_op1 => alu_in_op1,
    alu_in_op2 => alu_in_op2,
    res_shift => res_shift
  );
  exec2mem : fifo_72b
  PORT MAP (
    din(71 downto 0) => (dec_mem_lw & dec_mem_lb & dec_mem_sw & dec_mem_sb & dec_mem_dest & dec_mem_data & mem_adr),
    dout(71 downto 0) => (exe_mem_lw & exe_mem_lb & exe_mem_sw & exe_mem_sb & exe_mem_dest & exe_mem_data & exe_mem_adr),
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    full => exe2mem_full,
    empty => exe2mem_empty,
    pop => mem_pop,
    push => exe_push
  );
  alu_inst : alu
  PORT MAP (
    op1(31 downto 0) => alu_in_op1,
    op2(31 downto 0) => alu_in_op2,
    cmd(1 downto 0) => dec_alu_cmd,
    res(31 downto 0) => res_alu,
    vss => vss,
    vdd => vdd,
    v => exe_v,
    n => exe_n,
    z => exe_z,
    cout => cy_alu_out,
    cin => dec_cy
  );
  shifter_inst : shifter
  PORT MAP (
    shift_val(4 downto 0) => dec_shift_val,
    din(31 downto 0) => dec_op2,
    dout(31 downto 0) => res_shift,
    vss => vss,
    vdd => vdd,
    cout => cy_shift_out,
    cin => dec_cy,
    shift_rrx => dec_shift_rrx,
    shift_ror => dec_shift_ror,
    shift_asr => dec_shift_asr,
    shift_lsr => dec_shift_lsr,
    shift_lsl => dec_shift_lsl
  );
END VST;
