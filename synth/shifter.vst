--
-- Generated by VASY
--
ENTITY shifter IS
PORT(
  shift_lsl	: IN BIT;
  shift_lsr	: IN BIT;
  shift_asr	: IN BIT;
  shift_ror	: IN BIT;
  shift_rrx	: IN BIT;
  shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT
);
END shifter;

ARCHITECTURE VST OF shifter IS

  SIGNAL out_shift_left	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL out_shift_right	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL out_shift_ror	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL carry_out_left	: BIT;
  SIGNAL carry_out_right	: BIT;
  SIGNAL carry_out_ror	: BIT;
  COMPONENT shifter_model
  PORT(
  shift_lsl	: IN BIT;
  shift_lsr	: IN BIT;
  shift_asr	: IN BIT;
  shift_ror	: IN BIT;
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  carry_out_ror	: IN BIT;
  carry_out_right	: IN BIT;
  carry_out_left	: IN BIT;
  out_shift_ror	: IN BIT_VECTOR(31 DOWNTO 0);
  out_shift_right	: IN BIT_VECTOR(31 DOWNTO 0);
  out_shift_left	: IN BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT ror_entity
  PORT(
  shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT shift_right
  PORT(
  arithmetic	: IN BIT;
  shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT
  );
  END COMPONENT;

  COMPONENT shift_left
  PORT(
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  shift_value	: IN BIT_VECTOR(4 DOWNTO 0);
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  carry_out	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  shifter_inst : shifter_model
  PORT MAP (
    shift_lsl => shift_lsl,
    shift_lsr => shift_lsr,
    shift_asr => shift_asr,
    shift_ror => shift_ror,
    din => din,
    cin => cin,
    vdd => vdd,
    vss => vss,
    dout => dout,
    cout => cout,
    carry_out_ror => carry_out_ror,
    carry_out_right => carry_out_right,
    carry_out_left => carry_out_left,
    out_shift_ror => out_shift_ror,
    out_shift_right => out_shift_right,
    out_shift_left => out_shift_left
  );
  shift_ror0 : ror_entity
  PORT MAP (
    din => din,
    shift_val => shift_val,
    dout => out_shift_ror,
    vss => vss,
    vdd => vdd,
    cout => carry_out_ror,
    cin => cin
  );
  shift_right0 : shift_right
  PORT MAP (
    din => din,
    shift_val => shift_val,
    dout => out_shift_right,
    vss => vss,
    vdd => vdd,
    cout => carry_out_right,
    cin => cin,
    arithmetic => shift_asr
  );
  shift_left0 : shift_left
  PORT MAP (
    din => din,
    shift_value(4 downto 0) => shift_val,
    dout => out_shift_left,
    vss => vss,
    vdd => vdd,
    carry_out => carry_out_left
  );
END VST;
