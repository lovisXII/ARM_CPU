--
-- Generated by VASY
--
ENTITY decod IS
PORT(
  dec_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: OUT BIT;
  dec_flag_wb	: OUT BIT;
  dec_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: OUT BIT;
  dec_mem_lw	: OUT BIT;
  dec_mem_lb	: OUT BIT;
  dec_mem_sw	: OUT BIT;
  dec_mem_sb	: OUT BIT;
  dec_shift_lsl	: OUT BIT;
  dec_shift_lsr	: OUT BIT;
  dec_shift_asr	: OUT BIT;
  dec_shift_ror	: OUT BIT;
  dec_shift_rrx	: OUT BIT;
  dec_shift_val	: OUT BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: OUT BIT;
  dec_comp_op1	: OUT BIT;
  dec_comp_op2	: OUT BIT;
  dec_alu_cy	: OUT BIT;
  dec2exe_push	: OUT BIT;
  dec2exe_full	: IN BIT;
  dec_alu_add	: OUT BIT;
  dec_alu_and	: OUT BIT;
  dec_alu_or	: OUT BIT;
  dec_alu_xor	: OUT BIT;
  exe_res	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_c	: IN BIT;
  exe_v	: IN BIT;
  exe_n	: IN BIT;
  exe_z	: IN BIT;
  exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: IN BIT;
  exe_flag_wb	: IN BIT;
  dec_pc	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_ir	: IN BIT_VECTOR(31 DOWNTO 0);
  if_flush	: OUT BIT;
  dec2if_empty	: OUT BIT;
  if_pop	: IN BIT;
  if2dec_empty	: IN BIT;
  dec_pop	: OUT BIT;
  mem_res	: IN BIT_VECTOR(31 DOWNTO 0);
  mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  mem_wb	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END decod;

ARCHITECTURE VST OF decod IS

  SIGNAL dec2if_empty_signal	: BIT;
  SIGNAL dec2if_full_signal	: BIT;
  SIGNAL cry	: BIT;
  SIGNAL zero	: BIT;
  SIGNAL neg	: BIT;
  SIGNAL ovr	: BIT;
  SIGNAL radr1_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL radr2_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL radr3_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL radr4_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rdata1_signal	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rdata2_signal	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rdata3_signal	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rdata4_signal	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rv1_signal	: BIT;
  SIGNAL rv2_signal	: BIT;
  SIGNAL rv3_signal	: BIT;
  SIGNAL rv4_signal	: BIT;
  SIGNAL reg_cznv_signal	: BIT;
  SIGNAL reg_vv_signal	: BIT;
  SIGNAL inval_adr1_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL inval1_signal	: BIT;
  SIGNAL inval_adr2_signal	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL inval2_signal	: BIT;
  SIGNAL inval_czn_signal	: BIT;
  SIGNAL inval_ovr_signal	: BIT;
  SIGNAL reg_pc_signal	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL reg_pcv_signal	: BIT;
  SIGNAL dec2if_push	: BIT;
  SIGNAL inc_pc_signal	: BIT;
  COMPONENT decod_model
  PORT(
  dec_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: OUT BIT;
  dec_flag_wb	: OUT BIT;
  dec_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: OUT BIT;
  dec_mem_lw	: OUT BIT;
  dec_mem_lb	: OUT BIT;
  dec_mem_sw	: OUT BIT;
  dec_mem_sb	: OUT BIT;
  dec_shift_lsl	: OUT BIT;
  dec_shift_lsr	: OUT BIT;
  dec_shift_asr	: OUT BIT;
  dec_shift_ror	: OUT BIT;
  dec_shift_rrx	: OUT BIT;
  dec_shift_val	: OUT BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: OUT BIT;
  dec_comp_op1	: OUT BIT;
  dec_comp_op2	: OUT BIT;
  dec_alu_cy	: OUT BIT;
  dec2exe_push	: OUT BIT;
  dec2exe_full	: IN BIT;
  dec_alu_add	: OUT BIT;
  dec_alu_and	: OUT BIT;
  dec_alu_or	: OUT BIT;
  dec_alu_xor	: OUT BIT;
  exe_res	: IN BIT_VECTOR(31 DOWNTO 0);
  if_ir	: IN BIT_VECTOR(31 DOWNTO 0);
  if_flush	: OUT BIT;
  dec2if_empty	: OUT BIT;
  if2dec_empty	: IN BIT;
  dec_pop	: OUT BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  inc_pc_signal	: OUT BIT;
  dec2if_push	: INOUT BIT;
  reg_pcv_signal	: IN BIT;
  inval_ovr_signal	: OUT BIT;
  inval_czn_signal	: OUT BIT;
  inval2_signal	: OUT BIT;
  inval_adr2_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  inval1_signal	: INOUT BIT;
  inval_adr1_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  reg_vv_signal	: IN BIT;
  reg_cznv_signal	: IN BIT;
  rv4_signal	: IN BIT;
  rv3_signal	: IN BIT;
  rv2_signal	: IN BIT;
  rv1_signal	: IN BIT;
  rdata4_signal	: IN BIT_VECTOR(4 DOWNTO 0);
  rdata3_signal	: IN BIT_VECTOR(31 DOWNTO 0);
  rdata2_signal	: IN BIT_VECTOR(31 DOWNTO 0);
  rdata1_signal	: IN BIT_VECTOR(31 DOWNTO 0);
  radr4_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  radr3_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  radr2_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  radr1_signal	: OUT BIT_VECTOR(3 DOWNTO 0);
  ovr	: IN BIT;
  neg	: IN BIT;
  zero	: IN BIT;
  cry	: IN BIT;
  dec2if_full_signal	: IN BIT;
  dec2if_empty_signal	: IN BIT
  );
  END COMPONENT;

  COMPONENT fifo_32b
  PORT(
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT reg
  PORT(
  wdata1	: IN BIT_VECTOR(31 DOWNTO 0);
  wadr1	: IN BIT_VECTOR(3 DOWNTO 0);
  wen1	: IN BIT;
  wdata2	: IN BIT_VECTOR(31 DOWNTO 0);
  wadr2	: IN BIT_VECTOR(3 DOWNTO 0);
  wen2	: IN BIT;
  wcry	: IN BIT;
  wzero	: IN BIT;
  wneg	: IN BIT;
  wovr	: IN BIT;
  cspr_wb	: IN BIT;
  reg_rd1	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr1	: IN BIT_VECTOR(3 DOWNTO 0);
  reg_v1	: OUT BIT;
  reg_rd2	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr2	: IN BIT_VECTOR(3 DOWNTO 0);
  reg_v2	: OUT BIT;
  reg_rd3	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr3	: IN BIT_VECTOR(3 DOWNTO 0);
  reg_v3	: OUT BIT;
  reg_rd4	: OUT BIT_VECTOR(4 DOWNTO 0);
  radr4	: IN BIT_VECTOR(3 DOWNTO 0);
  reg_v4	: OUT BIT;
  reg_cry	: OUT BIT;
  reg_zero	: OUT BIT;
  reg_neg	: OUT BIT;
  reg_cznv	: OUT BIT;
  reg_ovr	: OUT BIT;
  reg_vv	: OUT BIT;
  inval_adr1	: IN BIT_VECTOR(3 DOWNTO 0);
  inval1	: IN BIT;
  inval_adr2	: IN BIT_VECTOR(3 DOWNTO 0);
  inval2	: IN BIT;
  inval_czn	: IN BIT;
  inval_ovr	: IN BIT;
  reg_pc	: OUT BIT_VECTOR(31 DOWNTO 0);
  reg_pcv	: OUT BIT;
  inc_pc	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  decod_inst : decod_model
  PORT MAP (
    dec_op1 => dec_op1,
    dec_op2 => dec_op2,
    dec_exe_dest => dec_exe_dest,
    dec_exe_wb => dec_exe_wb,
    dec_flag_wb => dec_flag_wb,
    dec_mem_data => dec_mem_data,
    dec_mem_dest => dec_mem_dest,
    dec_pre_index => dec_pre_index,
    dec_mem_lw => dec_mem_lw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_sb => dec_mem_sb,
    dec_shift_lsl => dec_shift_lsl,
    dec_shift_lsr => dec_shift_lsr,
    dec_shift_asr => dec_shift_asr,
    dec_shift_ror => dec_shift_ror,
    dec_shift_rrx => dec_shift_rrx,
    dec_shift_val => dec_shift_val,
    dec_cy => dec_cy,
    dec_comp_op1 => dec_comp_op1,
    dec_comp_op2 => dec_comp_op2,
    dec_alu_cy => dec_alu_cy,
    dec2exe_push => dec2exe_push,
    dec2exe_full => dec2exe_full,
    dec_alu_add => dec_alu_add,
    dec_alu_and => dec_alu_and,
    dec_alu_or => dec_alu_or,
    dec_alu_xor => dec_alu_xor,
    exe_res => exe_res,
    if_ir => if_ir,
    if_flush => if_flush,
    dec2if_empty => dec2if_empty,
    if2dec_empty => if2dec_empty,
    dec_pop => dec_pop,
    ck => ck,
    reset_n => reset_n,
    vdd => vdd,
    vss => vss,
    inc_pc_signal => inc_pc_signal,
    dec2if_push => dec2if_push,
    reg_pcv_signal => reg_pcv_signal,
    inval_ovr_signal => inval_ovr_signal,
    inval_czn_signal => inval_czn_signal,
    inval2_signal => inval2_signal,
    inval_adr2_signal => inval_adr2_signal,
    inval1_signal => inval1_signal,
    inval_adr1_signal => inval_adr1_signal,
    reg_vv_signal => reg_vv_signal,
    reg_cznv_signal => reg_cznv_signal,
    rv4_signal => rv4_signal,
    rv3_signal => rv3_signal,
    rv2_signal => rv2_signal,
    rv1_signal => rv1_signal,
    rdata4_signal => rdata4_signal,
    rdata3_signal => rdata3_signal,
    rdata2_signal => rdata2_signal,
    rdata1_signal => rdata1_signal,
    radr4_signal => radr4_signal,
    radr3_signal => radr3_signal,
    radr2_signal => radr2_signal,
    radr1_signal => radr1_signal,
    ovr => ovr,
    neg => neg,
    zero => zero,
    cry => cry,
    dec2if_full_signal => dec2if_full_signal,
    dec2if_empty_signal => dec2if_empty_signal
  );
  dec2if : fifo_32b
  PORT MAP (
    din(31 downto 0) => reg_pc_signal,
    dout(31 downto 0) => dec_pc,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    empty => dec2if_empty_signal,
    full => dec2if_full_signal,
    pop => if_pop,
    push => dec2if_push
  );
  reg0 : reg
  PORT MAP (
    wdata1(31 downto 0) => exe_res,
    wadr1(3 downto 0) => exe_dest,
    wdata2(31 downto 0) => mem_res,
    wadr2(3 downto 0) => mem_dest,
    reg_rd1(31 downto 0) => rdata1_signal,
    radr1(3 downto 0) => radr1_signal,
    reg_rd2(31 downto 0) => rdata2_signal,
    radr2(3 downto 0) => radr2_signal,
    reg_rd3(31 downto 0) => rdata3_signal,
    radr3(3 downto 0) => radr3_signal,
    reg_rd4(4 downto 0) => rdata4_signal,
    radr4(3 downto 0) => radr4_signal,
    inval_adr1(3 downto 0) => inval_adr1_signal,
    inval_adr2(3 downto 0) => inval_adr2_signal,
    reg_pc(31 downto 0) => reg_pc_signal,
    vss => vss,
    vdd => vdd,
    reset_n => reset_n,
    ck => ck,
    inc_pc => inc_pc_signal,
    reg_pcv => reg_pcv_signal,
    inval_ovr => inval_ovr_signal,
    inval_czn => inval_czn_signal,
    inval2 => inval2_signal,
    inval1 => inval1_signal,
    reg_vv => reg_vv_signal,
    reg_ovr => ovr,
    reg_cznv => reg_cznv_signal,
    reg_neg => neg,
    reg_zero => zero,
    reg_cry => cry,
    reg_v4 => rv4_signal,
    reg_v3 => rv3_signal,
    reg_v2 => rv2_signal,
    reg_v1 => rv1_signal,
    cspr_wb => exe_flag_wb,
    wovr => exe_v,
    wneg => exe_n,
    wzero => exe_z,
    wcry => exe_c,
    wen2 => mem_wb,
    wen1 => exe_wb
  );
END VST;
