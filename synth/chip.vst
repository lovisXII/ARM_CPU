--
-- Generated by VASY
--
ENTITY chip IS
PORT(
  if_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_adr_valid	: OUT BIT;
  ic_inst	: IN BIT_VECTOR(31 DOWNTO 0);
  ic_stall	: IN BIT;
  mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  mem_stw	: OUT BIT;
  mem_stb	: OUT BIT;
  mem_load	: OUT BIT;
  mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dc_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dc_stall	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vddi	: IN BIT;
  vssi	: IN BIT;
  vdde	: IN BIT;
  vsse	: IN BIT
);
END chip;

ARCHITECTURE VST OF chip IS

  SIGNAL core_if_adr	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL core_if_adr_valid	: BIT;
  SIGNAL pad_ic_inst	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pad_ic_stall	: BIT;
  SIGNAL core_mem_adr	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL core_mem_stw	: BIT;
  SIGNAL core_mem_stb	: BIT;
  SIGNAL core_mem_load	: BIT;
  SIGNAL core_mem_data	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pad_dc_data	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pad_dc_stall	: BIT;
  SIGNAL pad_ck	: BIT;
  SIGNAL pad_reset_n	: BIT;
  SIGNAL ck_ring	: BIT;

  COMPONENT pvssick_px
  PORT(
  cko	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT pvddick_px
  PORT(
  cko	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT pvsseck_px
  PORT(
  cko	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT pvddeck_px
  PORT(
  cko	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT pck_px
  PORT(
  pad	: IN BIT;
  ck	: OUT BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT po_px
  PORT(
  i	: IN BIT;
  pad	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT pi_px
  PORT(
  pad	: IN BIT;
  t	: OUT BIT;
  ck	: IN BIT;
  vdde	: IN BIT;
  vddi	: IN BIT;
  vsse	: IN BIT;
  vssi	: IN BIT
  );
  END COMPONENT;

  COMPONENT core
  PORT(
  if_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_adr_valid	: OUT BIT;
  ic_inst	: IN BIT_VECTOR(31 DOWNTO 0);
  ic_stall	: IN BIT;
  mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  mem_stw	: OUT BIT;
  mem_stb	: OUT BIT;
  mem_load	: OUT BIT;
  mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dc_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dc_stall	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  pvssi_3 : pvssick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvssi_2 : pvssick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvssi_1 : pvssick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvssi_0 : pvssick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvsse_3 : pvsseck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvsse_2 : pvsseck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvsse_1 : pvsseck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvsse_0 : pvsseck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvddi_3 : pvddick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvddi_2 : pvddick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvddi_1 : pvddick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvddi_0 : pvddick_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvdde_3 : pvddeck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvdde_2 : pvddeck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvdde_1 : pvddeck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  pvdde_0 : pvddeck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    cko => pad_ck
  );
  preset : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => reset_n,
    t => pad_reset_n
  );
  pck : pck_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ck
  );
  dc_stall_pad : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_stall,
    t => pad_dc_stall
  );
  dc_data_31 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(31),
    t => pad_dc_data(31)
  );
  dc_data_30 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(30),
    t => pad_dc_data(30)
  );
  dc_data_29 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(29),
    t => pad_dc_data(29)
  );
  dc_data_28 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(28),
    t => pad_dc_data(28)
  );
  dc_data_27 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(27),
    t => pad_dc_data(27)
  );
  dc_data_26 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(26),
    t => pad_dc_data(26)
  );
  dc_data_25 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(25),
    t => pad_dc_data(25)
  );
  dc_data_24 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(24),
    t => pad_dc_data(24)
  );
  dc_data_23 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(23),
    t => pad_dc_data(23)
  );
  dc_data_22 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(22),
    t => pad_dc_data(22)
  );
  dc_data_21 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(21),
    t => pad_dc_data(21)
  );
  dc_data_20 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(20),
    t => pad_dc_data(20)
  );
  dc_data_19 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(19),
    t => pad_dc_data(19)
  );
  dc_data_18 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(18),
    t => pad_dc_data(18)
  );
  dc_data_17 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(17),
    t => pad_dc_data(17)
  );
  dc_data_16 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(16),
    t => pad_dc_data(16)
  );
  dc_data_15 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(15),
    t => pad_dc_data(15)
  );
  dc_data_14 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(14),
    t => pad_dc_data(14)
  );
  dc_data_13 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(13),
    t => pad_dc_data(13)
  );
  dc_data_12 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(12),
    t => pad_dc_data(12)
  );
  dc_data_11 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(11),
    t => pad_dc_data(11)
  );
  dc_data_10 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(10),
    t => pad_dc_data(10)
  );
  dc_data_9 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(9),
    t => pad_dc_data(9)
  );
  dc_data_8 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(8),
    t => pad_dc_data(8)
  );
  dc_data_7 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(7),
    t => pad_dc_data(7)
  );
  dc_data_6 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(6),
    t => pad_dc_data(6)
  );
  dc_data_5 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(5),
    t => pad_dc_data(5)
  );
  dc_data_4 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(4),
    t => pad_dc_data(4)
  );
  dc_data_3 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(3),
    t => pad_dc_data(3)
  );
  dc_data_2 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(2),
    t => pad_dc_data(2)
  );
  dc_data_1 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(1),
    t => pad_dc_data(1)
  );
  dc_data_0 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => dc_data(0),
    t => pad_dc_data(0)
  );
  mem_data_31 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(31),
    i => core_mem_data(31)
  );
  mem_data_30 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(30),
    i => core_mem_data(30)
  );
  mem_data_29 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(29),
    i => core_mem_data(29)
  );
  mem_data_28 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(28),
    i => core_mem_data(28)
  );
  mem_data_27 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(27),
    i => core_mem_data(27)
  );
  mem_data_26 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(26),
    i => core_mem_data(26)
  );
  mem_data_25 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(25),
    i => core_mem_data(25)
  );
  mem_data_24 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(24),
    i => core_mem_data(24)
  );
  mem_data_23 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(23),
    i => core_mem_data(23)
  );
  mem_data_22 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(22),
    i => core_mem_data(22)
  );
  mem_data_21 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(21),
    i => core_mem_data(21)
  );
  mem_data_20 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(20),
    i => core_mem_data(20)
  );
  mem_data_19 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(19),
    i => core_mem_data(19)
  );
  mem_data_18 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(18),
    i => core_mem_data(18)
  );
  mem_data_17 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(17),
    i => core_mem_data(17)
  );
  mem_data_16 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(16),
    i => core_mem_data(16)
  );
  mem_data_15 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(15),
    i => core_mem_data(15)
  );
  mem_data_14 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(14),
    i => core_mem_data(14)
  );
  mem_data_13 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(13),
    i => core_mem_data(13)
  );
  mem_data_12 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(12),
    i => core_mem_data(12)
  );
  mem_data_11 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(11),
    i => core_mem_data(11)
  );
  mem_data_10 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(10),
    i => core_mem_data(10)
  );
  mem_data_9 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(9),
    i => core_mem_data(9)
  );
  mem_data_8 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(8),
    i => core_mem_data(8)
  );
  mem_data_7 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(7),
    i => core_mem_data(7)
  );
  mem_data_6 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(6),
    i => core_mem_data(6)
  );
  mem_data_5 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(5),
    i => core_mem_data(5)
  );
  mem_data_4 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(4),
    i => core_mem_data(4)
  );
  mem_data_3 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(3),
    i => core_mem_data(3)
  );
  mem_data_2 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(2),
    i => core_mem_data(2)
  );
  mem_data_1 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(1),
    i => core_mem_data(1)
  );
  mem_data_0 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_data(0),
    i => core_mem_data(0)
  );
  mem_load_pad : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_load,
    i => core_mem_load
  );
  mem_stb_pad : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_stb,
    i => core_mem_stb
  );
  mem_stw_pad : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_stw,
    i => core_mem_stw
  );
  mem_adr_31 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(31),
    i => core_mem_adr(31)
  );
  mem_adr_30 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(30),
    i => core_mem_adr(30)
  );
  mem_adr_29 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(29),
    i => core_mem_adr(29)
  );
  mem_adr_28 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(28),
    i => core_mem_adr(28)
  );
  mem_adr_27 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(27),
    i => core_mem_adr(27)
  );
  mem_adr_26 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(26),
    i => core_mem_adr(26)
  );
  mem_adr_25 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(25),
    i => core_mem_adr(25)
  );
  mem_adr_24 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(24),
    i => core_mem_adr(24)
  );
  mem_adr_23 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(23),
    i => core_mem_adr(23)
  );
  mem_adr_22 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(22),
    i => core_mem_adr(22)
  );
  mem_adr_21 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(21),
    i => core_mem_adr(21)
  );
  mem_adr_20 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(20),
    i => core_mem_adr(20)
  );
  mem_adr_19 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(19),
    i => core_mem_adr(19)
  );
  mem_adr_18 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(18),
    i => core_mem_adr(18)
  );
  mem_adr_17 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(17),
    i => core_mem_adr(17)
  );
  mem_adr_16 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(16),
    i => core_mem_adr(16)
  );
  mem_adr_15 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(15),
    i => core_mem_adr(15)
  );
  mem_adr_14 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(14),
    i => core_mem_adr(14)
  );
  mem_adr_13 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(13),
    i => core_mem_adr(13)
  );
  mem_adr_12 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(12),
    i => core_mem_adr(12)
  );
  mem_adr_11 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(11),
    i => core_mem_adr(11)
  );
  mem_adr_10 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(10),
    i => core_mem_adr(10)
  );
  mem_adr_9 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(9),
    i => core_mem_adr(9)
  );
  mem_adr_8 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(8),
    i => core_mem_adr(8)
  );
  mem_adr_7 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(7),
    i => core_mem_adr(7)
  );
  mem_adr_6 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(6),
    i => core_mem_adr(6)
  );
  mem_adr_5 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(5),
    i => core_mem_adr(5)
  );
  mem_adr_4 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(4),
    i => core_mem_adr(4)
  );
  mem_adr_3 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(3),
    i => core_mem_adr(3)
  );
  mem_adr_2 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(2),
    i => core_mem_adr(2)
  );
  mem_adr_1 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(1),
    i => core_mem_adr(1)
  );
  mem_adr_0 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => mem_adr(0),
    i => core_mem_adr(0)
  );
  ic_stall_pad : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_stall,
    t => pad_ic_stall
  );
  ic_inst_31 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(31),
    t => pad_ic_inst(31)
  );
  ic_inst_30 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(30),
    t => pad_ic_inst(30)
  );
  ic_inst_29 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(29),
    t => pad_ic_inst(29)
  );
  ic_inst_28 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(28),
    t => pad_ic_inst(28)
  );
  ic_inst_27 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(27),
    t => pad_ic_inst(27)
  );
  ic_inst_26 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(26),
    t => pad_ic_inst(26)
  );
  ic_inst_25 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(25),
    t => pad_ic_inst(25)
  );
  ic_inst_24 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(24),
    t => pad_ic_inst(24)
  );
  ic_inst_23 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(23),
    t => pad_ic_inst(23)
  );
  ic_inst_22 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(22),
    t => pad_ic_inst(22)
  );
  ic_inst_21 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(21),
    t => pad_ic_inst(21)
  );
  ic_inst_20 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(20),
    t => pad_ic_inst(20)
  );
  ic_inst_19 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(19),
    t => pad_ic_inst(19)
  );
  ic_inst_18 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(18),
    t => pad_ic_inst(18)
  );
  ic_inst_17 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(17),
    t => pad_ic_inst(17)
  );
  ic_inst_16 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(16),
    t => pad_ic_inst(16)
  );
  ic_inst_15 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(15),
    t => pad_ic_inst(15)
  );
  ic_inst_14 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(14),
    t => pad_ic_inst(14)
  );
  ic_inst_13 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(13),
    t => pad_ic_inst(13)
  );
  ic_inst_12 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(12),
    t => pad_ic_inst(12)
  );
  ic_inst_11 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(11),
    t => pad_ic_inst(11)
  );
  ic_inst_10 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(10),
    t => pad_ic_inst(10)
  );
  ic_inst_9 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(9),
    t => pad_ic_inst(9)
  );
  ic_inst_8 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(8),
    t => pad_ic_inst(8)
  );
  ic_inst_7 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(7),
    t => pad_ic_inst(7)
  );
  ic_inst_6 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(6),
    t => pad_ic_inst(6)
  );
  ic_inst_5 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(5),
    t => pad_ic_inst(5)
  );
  ic_inst_4 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(4),
    t => pad_ic_inst(4)
  );
  ic_inst_3 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(3),
    t => pad_ic_inst(3)
  );
  ic_inst_2 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(2),
    t => pad_ic_inst(2)
  );
  ic_inst_1 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(1),
    t => pad_ic_inst(1)
  );
  ic_inst_0 : pi_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => ic_inst(0),
    t => pad_ic_inst(0)
  );
  if_adr_valid_pad : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr_valid,
    i => core_if_adr_valid
  );
  if_adr_31 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(31),
    i => core_if_adr(31)
  );
  if_adr_30 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(30),
    i => core_if_adr(30)
  );
  if_adr_29 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(29),
    i => core_if_adr(29)
  );
  if_adr_28 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(28),
    i => core_if_adr(28)
  );
  if_adr_27 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(27),
    i => core_if_adr(27)
  );
  if_adr_26 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(26),
    i => core_if_adr(26)
  );
  if_adr_25 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(25),
    i => core_if_adr(25)
  );
  if_adr_24 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(24),
    i => core_if_adr(24)
  );
  if_adr_23 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(23),
    i => core_if_adr(23)
  );
  if_adr_22 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(22),
    i => core_if_adr(22)
  );
  if_adr_21 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(21),
    i => core_if_adr(21)
  );
  if_adr_20 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(20),
    i => core_if_adr(20)
  );
  if_adr_19 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(19),
    i => core_if_adr(19)
  );
  if_adr_18 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(18),
    i => core_if_adr(18)
  );
  if_adr_17 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(17),
    i => core_if_adr(17)
  );
  if_adr_16 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(16),
    i => core_if_adr(16)
  );
  if_adr_15 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(15),
    i => core_if_adr(15)
  );
  if_adr_14 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(14),
    i => core_if_adr(14)
  );
  if_adr_13 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(13),
    i => core_if_adr(13)
  );
  if_adr_12 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(12),
    i => core_if_adr(12)
  );
  if_adr_11 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(11),
    i => core_if_adr(11)
  );
  if_adr_10 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(10),
    i => core_if_adr(10)
  );
  if_adr_9 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(9),
    i => core_if_adr(9)
  );
  if_adr_8 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(8),
    i => core_if_adr(8)
  );
  if_adr_7 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(7),
    i => core_if_adr(7)
  );
  if_adr_6 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(6),
    i => core_if_adr(6)
  );
  if_adr_5 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(5),
    i => core_if_adr(5)
  );
  if_adr_4 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(4),
    i => core_if_adr(4)
  );
  if_adr_3 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(3),
    i => core_if_adr(3)
  );
  if_adr_2 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(2),
    i => core_if_adr(2)
  );
  if_adr_1 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(1),
    i => core_if_adr(1)
  );
  if_adr_0 : po_px
  PORT MAP (
    vssi => vssi,
    vsse => vsse,
    vddi => vddi,
    vdde => vdde,
    ck => ck_ring,
    pad => if_adr(0),
    i => core_if_adr(0)
  );
  core_i : core
  PORT MAP (
    if_adr => core_if_adr,
    ic_inst => pad_ic_inst,
    mem_adr => core_mem_adr,
    mem_data => core_mem_data,
    dc_data => pad_dc_data,
    vss => vssi,
    vdd => vddi,
    reset_n => pad_reset_n,
    ck => pad_ck,
    dc_stall => pad_dc_stall,
    mem_load => core_mem_load,
    mem_stb => core_mem_stb,
    mem_stw => core_mem_stw,
    ic_stall => pad_ic_stall,
    if_adr_valid => core_if_adr_valid
  );
END VST;
